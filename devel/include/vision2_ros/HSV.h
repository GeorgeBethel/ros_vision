// Generated by gencpp from file vision2_ros/HSV.msg
// DO NOT EDIT!


#ifndef VISION2_ROS_MESSAGE_HSV_H
#define VISION2_ROS_MESSAGE_HSV_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace vision2_ros
{
template <class ContainerAllocator>
struct HSV_
{
  typedef HSV_<ContainerAllocator> Type;

  HSV_()
    : hsv_values()  {
      hsv_values.assign(0);
  }
  HSV_(const ContainerAllocator& _alloc)
    : hsv_values()  {
  (void)_alloc;
      hsv_values.assign(0);
  }



   typedef boost::array<int64_t, 6>  _hsv_values_type;
  _hsv_values_type hsv_values;





  typedef boost::shared_ptr< ::vision2_ros::HSV_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::vision2_ros::HSV_<ContainerAllocator> const> ConstPtr;

}; // struct HSV_

typedef ::vision2_ros::HSV_<std::allocator<void> > HSV;

typedef boost::shared_ptr< ::vision2_ros::HSV > HSVPtr;
typedef boost::shared_ptr< ::vision2_ros::HSV const> HSVConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::vision2_ros::HSV_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::vision2_ros::HSV_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace vision2_ros

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'sensor_msgs': ['/opt/ros/melodic/share/sensor_msgs/cmake/../msg'], 'vision2_ros': ['/home/george/ros_vision/src/vision2_ros/msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::vision2_ros::HSV_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::vision2_ros::HSV_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision2_ros::HSV_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::vision2_ros::HSV_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision2_ros::HSV_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::vision2_ros::HSV_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::vision2_ros::HSV_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1fbdf4b8124056a7224543e418dc9dfe";
  }

  static const char* value(const ::vision2_ros::HSV_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1fbdf4b8124056a7ULL;
  static const uint64_t static_value2 = 0x224543e418dc9dfeULL;
};

template<class ContainerAllocator>
struct DataType< ::vision2_ros::HSV_<ContainerAllocator> >
{
  static const char* value()
  {
    return "vision2_ros/HSV";
  }

  static const char* value(const ::vision2_ros::HSV_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::vision2_ros::HSV_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# variables to hold HSV settings\n"
"\n"
"int64[6] hsv_values \n"
;
  }

  static const char* value(const ::vision2_ros::HSV_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::vision2_ros::HSV_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hsv_values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HSV_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::vision2_ros::HSV_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::vision2_ros::HSV_<ContainerAllocator>& v)
  {
    s << indent << "hsv_values[]" << std::endl;
    for (size_t i = 0; i < v.hsv_values.size(); ++i)
    {
      s << indent << "  hsv_values[" << i << "]: ";
      Printer<int64_t>::stream(s, indent + "  ", v.hsv_values[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // VISION2_ROS_MESSAGE_HSV_H
